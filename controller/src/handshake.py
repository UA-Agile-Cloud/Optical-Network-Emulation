import logging
import struct
import threading
import time

#from revent import Event,EventMixin
from ryu.base import app_manager
from ryu.controller import mac_to_port 
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER,CONFIG_DISPATCHER,DEAD_DISPATCHER,HANDSHAKE_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.mac import haddr_to_bin
from ryu.lib.packet import packet
from ryu.lib.packet import packet_base
import ryu.controller.ofp_handler as handler

import Database as database


class Handshake(app_manager.RyuApp):
    """A class inherits RyuApp, automatically loaded by RyuApp and can be communicating with other RYU modules

    It sends extension flow mods down to CDPI

    """
    dpid = {}
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        """Call the base RyuApp __init__"""
        super(Handshake, self).__init__(*args, **kwargs)

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, [CONFIG_DISPATCHER,MAIN_DISPATCHER,DEAD_DISPATCHER])
    def dispacher_change(self, ev):
        """Listen to the EventOFPStateChange generated by Ryu Applications and update datapath

           event is only triggered id the datapath stage is CONFIG_DISPATCHER or MAIN_DISPATCHER,DEAD_DISPATCHER
        """
        msg = ev.msg
        datapath = msg.datapath
        self.logger.debug('switch features ev %s', msg)
        datapath.id = msg.datapath_id
        self.logger.info('A switch with id %s is registered!',datapath.id)
        if datapath.id in database.Data.dpid2datapath.keys():
            self.logger.info('Duplicate dpid!Please double check')
        else:
            database.Data.dpid2datapath[int(datapath.id)] = datapath
        
        for node in database.Data.phy_topo.node_list:
            database.Data.ip2datapath[node.node_ip] = datapath
